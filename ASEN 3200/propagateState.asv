function oe = propagateState(oe0,t,t_0,MU,J2,Re)
%DESCRIPTION: Computes the propagated position and velocity in km, km/s
%accounting for approximate J2 perturbations
%
%INPUTS:
% oe0       Orbit elements [a,e,i,Om,om,f] at time t0 (km,s,rad)
% t         Current time (s)
% t0        Time at the initial epoch (s)
% MU        Central body's gravitational constant (km^3/s^2)
% J2        Central body's J2 parameter (dimensionless)
% Re        Radius of central body (km)
%
%OUTPUTS:
% x         Position and velocity vectors of the form [r; rdot] (6x1) at
%             time t

%breaking out orbital elements:
a = oe0(1); 
e = oe0(2);
i = oe0(3);
Om0 = oe0(4);
om0 = oe0(5);
f0 = oe0(6);

%make sure that function has outputs
x = NaN(6,1);

%1) Compute the mean orbit elements oe(t) at time t due to J2 perturbations
%regression of the line of nodes:
Omdot = -1.5*J2*sqrt(MU)*Re^2*cos(i)/( (sqrt(a))^7*(1-e^2)^2); 
Om = Om0+Omdot*(t-t_0);

%change in argument of perigree:
n = sqrt(MU/a^3); 
p = a*(1-e^2); 
omdot = 1.5*n*J2*(Re/p)^2*(2-5/2*(sin(i))^2); 
om = om0+omdot*(t-t_0); 

%storing in orbital element array:
oe = [a; e; i; Om; om; NaN];

%2) Solve the time-of-flight problem to compute the true anomaly at time t

%solving for E1, since f(0) does not necessarily equal 0:
E1 = 2 * atan(tan(f0/2)*sqrt((1-e)/(1+e))); 
M1 = E1 - e*sin(E1); 

%eccentric anomaly very roughly linear with respect to mean anomaly for
%ellipses: 
E2guess = M1*(t-t_0); 
E2func = @(E2) E2 - e*sin(E2) - E1 + e*sin(E1) - E2guess; 

E = fzero(E2func, E2guess); 
f = 2 * atan(tan(E/2)*sqrt((1+e)/(1-e))); 
oe(end) = f; 

%3) Compute r(t), rdot(t) in the perifocal frame
rmag = p/(1+e*cos(f)); 
hmag = sqrt(MU*p); 
r_pframe  = [rmag*cos(f); rmag*sin(f); 0];
rdot_pframe = MU/hmag * [-sin(f); (e+cos(f)); 0]; 

%4) Compute r(t), rdot(t) in the ECI frame, save into x

%transformation matrix from perifocal to ECI:
CP2N = [cos(Om)*cos(om)-sin(Om)*sin(om)*cos(i), -cos(Om)*sin(om)-sin(Om)*cos(om)*cos(i), sin(Om)*sin(i);...
    sin(Om)*cos(om)-cos(Om)*sin(om)*cos(i), -sin(Om)*sin(om)-cos(Om)*cos(om)*cos(i), -cos(Om)*sin(i);...
    sin(om)*sin(i), cos(om)*sin(i), cos(i)];
    
r_ECI = CP2N * r_pframe;
rdot_ECI = CP2N * rdot_pframe;
x = [r_ECI; rdot_ECI]; 
end